import { Platform } from 'react-native';
import compareVersions from 'compare-versions';
import { getIOSVersion } from './ios';
import { getAndroidVersion } from './android';
export const compareVersion = (local, remote) => {
    switch (compareVersions(local, remote)) {
        case -1:
            return 'new';
        case 1:
            return 'old';
        default:
            return 'equal';
    }
};
const checkVersion = async (params) => {
    if (!params.version) {
        throw new Error('local version is not set.');
    }
    if (Platform.OS === 'ios' && !params.iosStoreURL) {
        throw new Error('iosStoreURL is not set.');
    }
    if (Platform.OS === 'android' && !params.androidStoreURL) {
        throw new Error('androidStoreURL is not set.');
    }
    let remoteVersion;
    try {
        remoteVersion = (Platform.OS === 'ios')
            ? await getIOSVersion(params.iosStoreURL, params.country || 'jp')
            : await getAndroidVersion(params.androidStoreURL);
    }
    catch (e) {
        throw new Error(e.message);
    }
    const result = compareVersion(params.version, remoteVersion);
    let detail;
    switch (result) {
        case 'new':
            detail = 'remote > local';
            break;
        case 'old':
            detail = 'remote < local';
            break;
        default:
            detail = 'remote === local';
            break;
    }
    return {
        local: params.version,
        remote: remoteVersion,
        result,
        detail,
    };
};
export default checkVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLGVBQWUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQWdCOUMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBa0MsRUFBRTtJQUM5RixRQUFRLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDdEMsS0FBSyxDQUFDLENBQUM7WUFDTCxPQUFPLEtBQUssQ0FBQztRQUNmLEtBQUssQ0FBQztZQUNKLE9BQU8sS0FBSyxDQUFDO1FBQ2Y7WUFDRSxPQUFPLE9BQU8sQ0FBQztLQUNsQjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFBRSxNQUEwQixFQUFpQyxFQUFFO0lBQ3ZGLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUdELElBQUksUUFBUSxDQUFDLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO1FBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM1QztJQUVELElBQUksUUFBUSxDQUFDLEVBQUUsS0FBSyxTQUFTLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFO1FBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztLQUNoRDtJQUdELElBQUksYUFBcUIsQ0FBQztJQUUxQixJQUFJO1FBQ0YsYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUM7WUFDckMsQ0FBQyxDQUFDLE1BQU0sYUFBYSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDakUsQ0FBQyxDQUFDLE1BQU0saUJBQWlCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3JEO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM1QjtJQUVELE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzdELElBQUksTUFBc0MsQ0FBQztJQUMzQyxRQUFRLE1BQU0sRUFBRTtRQUNkLEtBQUssS0FBSztZQUNSLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQztZQUMxQixNQUFNO1FBQ1IsS0FBSyxLQUFLO1lBQ1IsTUFBTSxHQUFHLGdCQUFnQixDQUFDO1lBQzFCLE1BQU07UUFDUjtZQUNFLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztZQUM1QixNQUFNO0tBQ1Q7SUFHRCxPQUE2QjtRQUMzQixLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU87UUFDckIsTUFBTSxFQUFFLGFBQWE7UUFDckIsTUFBTTtRQUNOLE1BQU07S0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsZUFBZSxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY29tcGFyZVZlcnNpb25zIGZyb20gJ2NvbXBhcmUtdmVyc2lvbnMnO1xuaW1wb3J0IHsgZ2V0SU9TVmVyc2lvbiB9IGZyb20gJy4vaW9zJztcbmltcG9ydCB7IGdldEFuZHJvaWRWZXJzaW9uIH0gZnJvbSAnLi9hbmRyb2lkJztcblxudHlwZSBDaGVja1ZlcnNpb25QYXJhbXMgPSB7XG4gIGNvdW50cnk/OiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgaW9zU3RvcmVVUkw/OiBzdHJpbmc7XG4gIGFuZHJvaWRTdG9yZVVSTD86IHN0cmluZztcbn07XG5cbnR5cGUgQ2hlY2tWZXJzaW9uUmVzcG9uc2UgPSB7XG4gIGxvY2FsOiBzdHJpbmc7XG4gIHJlbW90ZTogc3RyaW5nO1xuICByZXN1bHQ6ICduZXcnIHwgJ29sZCcgfCAnZXF1YWwnO1xuICBkZXRhaWw6ICdyZW1vdGUgPiBsb2NhbCcgfCAncmVtb3RlIDwgbG9jYWwnIHwgJ3JlbW90ZSA9PT0gbG9jYWwnO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVWZXJzaW9uID0gKGxvY2FsOiBzdHJpbmcsIHJlbW90ZTogc3RyaW5nKTogQ2hlY2tWZXJzaW9uUmVzcG9uc2VbJ3Jlc3VsdCddID0+IHtcbiAgc3dpdGNoIChjb21wYXJlVmVyc2lvbnMobG9jYWwsIHJlbW90ZSkpIHtcbiAgICBjYXNlIC0xOlxuICAgICAgcmV0dXJuICduZXcnO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAnb2xkJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdlcXVhbCc7XG4gIH1cbn07XG5cbmNvbnN0IGNoZWNrVmVyc2lvbiA9IGFzeW5jIChwYXJhbXM6IENoZWNrVmVyc2lvblBhcmFtcyk6IFByb21pc2U8Q2hlY2tWZXJzaW9uUmVzcG9uc2U+ID0+IHtcbiAgaWYgKCFwYXJhbXMudmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignbG9jYWwgdmVyc2lvbiBpcyBub3Qgc2V0LicpO1xuICB9XG5cbiAgLyogY2hlY2sgc3RvcmUgdXJsICovXG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgJiYgIXBhcmFtcy5pb3NTdG9yZVVSTCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW9zU3RvcmVVUkwgaXMgbm90IHNldC4nKTtcbiAgfVxuXG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmICFwYXJhbXMuYW5kcm9pZFN0b3JlVVJMKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdhbmRyb2lkU3RvcmVVUkwgaXMgbm90IHNldC4nKTtcbiAgfVxuXG4gIC8qIGdldCB2ZXJzaW9uICovXG4gIGxldCByZW1vdGVWZXJzaW9uOiBzdHJpbmc7XG5cbiAgdHJ5IHtcbiAgICByZW1vdGVWZXJzaW9uID0gKFBsYXRmb3JtLk9TID09PSAnaW9zJylcbiAgICAgID8gYXdhaXQgZ2V0SU9TVmVyc2lvbihwYXJhbXMuaW9zU3RvcmVVUkwsIHBhcmFtcy5jb3VudHJ5IHx8ICdqcCcpXG4gICAgICA6IGF3YWl0IGdldEFuZHJvaWRWZXJzaW9uKHBhcmFtcy5hbmRyb2lkU3RvcmVVUkwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBjb21wYXJlVmVyc2lvbihwYXJhbXMudmVyc2lvbiwgcmVtb3RlVmVyc2lvbik7XG4gIGxldCBkZXRhaWw6IENoZWNrVmVyc2lvblJlc3BvbnNlWydkZXRhaWwnXTtcbiAgc3dpdGNoIChyZXN1bHQpIHtcbiAgICBjYXNlICduZXcnOlxuICAgICAgZGV0YWlsID0gJ3JlbW90ZSA+IGxvY2FsJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29sZCc6XG4gICAgICBkZXRhaWwgPSAncmVtb3RlIDwgbG9jYWwnO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRldGFpbCA9ICdyZW1vdGUgPT09IGxvY2FsJztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgLyogY29tcGFyZSB2ZXJzaW9uICovXG4gIHJldHVybiA8Q2hlY2tWZXJzaW9uUmVzcG9uc2U+e1xuICAgIGxvY2FsOiBwYXJhbXMudmVyc2lvbixcbiAgICByZW1vdGU6IHJlbW90ZVZlcnNpb24sXG4gICAgcmVzdWx0LFxuICAgIGRldGFpbCxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNoZWNrVmVyc2lvbjtcbiJdfQ==